#!/usr/bin/env python

__author__    = 'CHANG WENG LOON'
__copyright__ = 'Copyright (c) 2017 CHANG WENG LOON'
__license__   = 'MIT'
__version__   = '0.1'

import serial

'''Signal Generator Command'''
FM_CHANNEL = ":ANALOG:FM:CHANNEL"
FM_FM_MODE = ":ANALOG:FM:FM_MODE"
FM_FREQUENCY = ":ANALOG:FM:FREQUENCY"
FM_AUDIO_FREQ = ":ANALOG:FM:AUDIO_FREQ"
FM_FM_DEVIATION = ":ANALOG:FM:FM_DEVIATION"
FM_STEREO_MODE = ":ANALOG:FM:STEREO_MODE"
FM_AUDIO_FREQ_R = ":ANALOG:FM:AUDIO_FREQ_R"
FM_AUDIO_FREQ_L = ":ANALOG:FM:AUDIO_FREQ_L"
FM_CONTENTS_TYPE = ":ANALOG:FM:CONTENTS_TYPE"
FM_CONTENTS = ":ANALOG:FM:CONTENTS"
FM_SWEEP_START = ":ANALOG:FM:SWEEP_START"
FM_SWEEP_STOP = ":ANALOG:FM:SWEEP_STOP"
FM_SWEEP_TIME = ":ANALOG:FM:SWEEP_TIME"
FM_PILOT_LEVEL = ":ANALOG:FM:PILOT_LEVEL"
FM_PRE_EMPHASIS = ":ANALOG:FM:PRE_EMPHASIS"
FM_TIME_CONSTANT = ":ANALOG:FM:TIME_CONSTANT"
FM_AUDIO_VOLUME = ":ANALOG:FM:AUDIO_VOLUME"
RDS_RDS_MODE = ":ANALOG:RDS:RDS_MODE"
RDS_PID = ":ANALOG:RDS:PID"
RDS_REF = ":ANALOG:RDS:REF"
RDS_COUNTRY = ":ANALOG:RDS:COUNTRY"
RDS_ECC = ":ANALOG:RDS:ECC"
RDS_AREA_CODE = ":ANALOG:RDS:AREA_CODE"
RDS_PS_NAME = ":ANALOG:RDS:PS_NAME"
RDS_PS_NAME_HEX = ":ANALOG:RDS:PS_NAME_HEX"
RDS_MUSIC_SPEECH = ":ANALOG:RDS:MUSIC_SPEECH"
RDS_RADIO_TEXT = ":ANALOG:RDS:RADIO_TEXT"
RDS_RADIO_TEXT_HEX = ":ANALOG:RDS:RADIO_TEXT_HEX"
RDS_RADIO_TEXT_MODE = ":ANALOG:RDS:RADIO_TEXT_MODE"
RDS_RADIO_TEXT_HEADLINE = ":ANALOG:RDS:RADIO_TEXT_HEADLINE"
RDS_RADIO_TEXT_HEADLINE_HEX = ":ANALOG:RDS:RADIO_TEXT_HEADLINE_HEX"
RDS_HEADLINE_MODE = ":ANALOG:RDS:HEADLINE_MODE"
RDS_TEXT_DIRECTION = ":ANALOG:RDS:TEXT_DIRECTION"
RDS_RADIO_TEXT_CH = ":ANALOG:RDS:RADIO_TEXT_CH"
RDS_TAG0_TYPE = ":ANALOG:RDS:TAG0_TYPE"
RDS_TAG0_START = ":ANALOG:RDS:TAG0_START"
RDS_TAG0_LENGTH = ":ANALOG:RDS:TAG0_LENGTH"
RDS_TAG1_TYPE = ":ANALOG:RDS:TAG1_TYPE"
RDS_TAG1_START = ":ANALOG:RDS:TAG1_START"
RDS_TAG1_LENGTH = ":ANALOG:RDS:TAG1_LENGTH"
RDS_PRG_TYPE_MODE = ":ANALOG:RDS:PRG_TYPE_MODE"
RDS_PRG_TYPE = ":ANALOG:RDS:PRG_TYPE"
RDS_PRG_TYPE_NAME = ":ANALOG:RDS:PRG_TYPE_NAME"
RDS_PIN_DAY = ":ANALOG:RDS:PIN_DAY"
RDS_PIN_HOUR = ":ANALOG:RDS:PIN_HOUR"
RDS_PIN_MINUTE = ":ANALOG:RDS:PIN_MINUTE"
RDS_AF_METHOD = ":ANALOG:RDS:AF_METHOD"
RDS_AF_NUM = ":ANALOG:RDS:AF_NUM"
RDS_AF_NUM_VARIANT = ":ANALOG:RDS:AF_NUM_VARIANT"
RDS_AF_01 = ":ANALOG:RDS:AF_01"
RDS_AF_02 = ":ANALOG:RDS:AF_02"
RDS_AF_04 = ":ANALOG:RDS:AF_04"
RDS_AF_05 = ":ANALOG:RDS:AF_05"
RDS_AF_06 = ":ANALOG:RDS:AF_06"
RDS_AF_07 = ":ANALOG:RDS:AF_07"
RDS_AF_08 = ":ANALOG:RDS:AF_08"
RDS_AF_09 = ":ANALOG:RDS:AF_09"
RDS_AF_10 = ":ANALOG:RDS:AF_10"
RDS_TP = ":ANALOG:RDS:TP"
RDS_TA = ":ANALOG:RDS:TA"
RDS_TMC = ":ANALOG:RDS:TMC"
RDS_LANGUAGE = ":ANALOG:RDS:LANGUAGE"
RDS_TIME = ":ANALOG:RDS:TIME"
RDS_YEAR = ":ANALOG:RDS:YEAR"
RDS_MONTH = ":ANALOG:RDS:MONTH"
RDS_DAY = ":ANALOG:RDS:DAY"



TunerSignalgeneratorCommanddict = {
"RF" : "SETUP:RF",
"FREQUENCY" : "SETUP:FREQUENCY",
"POWER" : "SETUP:POWER",
"POWER_DBUV" : "SETUP:POWER:DBUV",
"PATH_LOSS" : "SETUP:PATH_LOSS",
"TESTER_MODE" : "SETUP:TESTER_MODE",
"FM_CHANNEL" : ":ANALOG:FM:CHANNEL",
"FM_FM_MODE" : ":ANALOG:FM:FM_MODE",
"FM_FREQUENCY" : ":ANALOG:FM:FREQUENCY",
"FM_AUDIO_FREQ" : ":ANALOG:FM:AUDIO_FREQ",
"FM_FM_DEVIATION" : ":ANALOG:FM:FM_DEVIATION",
"FM_STEREO_MODE" : ":ANALOG:FM:STEREO_MODE",
"FM_AUDIO_FREQ_R" : ":ANALOG:FM:AUDIO_FREQ_R",
"FM_AUDIO_FREQ_L" : ":ANALOG:FM:AUDIO_FREQ_L",
"FM_CONTENTS_TYPE" : ":ANALOG:FM:CONTENTS_TYPE",
"FM_CONTENTS" : ":ANALOG:FM:CONTENTS",
"FM_SWEEP_START" : ":ANALOG:FM:SWEEP_START",
"FM_SWEEP_STOP" : ":ANALOG:FM:SWEEP_STOP",
"FM_SWEEP_TIME" : ":ANALOG:FM:SWEEP_TIME",
"FM_PILOT_LEVEL" : ":ANALOG:FM:PILOT_LEVEL",
"FM_PRE_EMPHASIS" : ":ANALOG:FM:PRE_EMPHASIS",
"FM_TIME_CONSTANT" : ":ANALOG:FM:TIME_CONSTANT",
"FM_AUDIO_VOLUME" : ":ANALOG:FM:AUDIO_VOLUME",
"RDS_RDS_MODE" : ":ANALOG:RDS:RDS_MODE",
"RDS_PID" : ":ANALOG:RDS:PID",
"RDS_REF" : ":ANALOG:RDS:REF",
"RDS_COUNTRY" : ":ANALOG:RDS:COUNTRY",
"RDS_ECC" : ":ANALOG:RDS:ECC",
"RDS_AREA_CODE" : ":ANALOG:RDS:AREA_CODE",
"RDS_PS_NAME" : ":ANALOG:RDS:PS_NAME",
"RDS_PS_NAME_HEX" : ":ANALOG:RDS:PS_NAME_HEX",
"RDS_MUSIC_SPEECH" : ":ANALOG:RDS:MUSIC_SPEECH",
"RDS_RADIO_TEXT" : ":ANALOG:RDS:RADIO_TEXT",
"RDS_RADIO_TEXT_HEX" : ":ANALOG:RDS:RADIO_TEXT_HEX",
"RDS_RADIO_TEXT_MODE" : ":ANALOG:RDS:RADIO_TEXT_MODE",
"RDS_RADIO_TEXT_HEADLINE" : ":ANALOG:RDS:RADIO_TEXT_HEADLINE",
"RDS_RADIO_TEXT_HEADLINE_HEX" : ":ANALOG:RDS:RADIO_TEXT_HEADLINE_HEX",
"RDS_HEADLINE_MODE" : ":ANALOG:RDS:HEADLINE_MODE",
"RDS_TEXT_DIRECTION" : ":ANALOG:RDS:TEXT_DIRECTION",
"RDS_RADIO_TEXT_CH" : ":ANALOG:RDS:RADIO_TEXT_CH",
"RDS_TAG0_TYPE" : ":ANALOG:RDS:TAG0_TYPE",
"RDS_TAG0_START" : ":ANALOG:RDS:TAG0_START",
"RDS_TAG0_LENGTH" : ":ANALOG:RDS:TAG0_LENGTH",
"RDS_TAG1_TYPE" : ":ANALOG:RDS:TAG1_TYPE",
"RDS_TAG1_START" : ":ANALOG:RDS:TAG1_START",
"RDS_TAG1_LENGTH" : ":ANALOG:RDS:TAG1_LENGTH",
"RDS_PRG_TYPE_MODE" : ":ANALOG:RDS:PRG_TYPE_MODE",
"RDS_PRG_TYPE" : ":ANALOG:RDS:PRG_TYPE",
"RDS_PRG_TYPE_NAME" : ":ANALOG:RDS:PRG_TYPE_NAME",
"RDS_PIN_DAY" : ":ANALOG:RDS:PIN_DAY",
"RDS_PIN_HOUR" : ":ANALOG:RDS:PIN_HOUR",
"RDS_PIN_MINUTE" : ":ANALOG:RDS:PIN_MINUTE",
"RDS_AF_METHOD" : ":ANALOG:RDS:AF_METHOD",
"RDS_AF_NUM" : ":ANALOG:RDS:AF_NUM",
"RDS_AF_NUM_VARIANT" : ":ANALOG:RDS:AF_NUM_VARIANT",
"RDS_AF_01" : ":ANALOG:RDS:AF_01",
"RDS_AF_02" : ":ANALOG:RDS:AF_02",
"RDS_AF_04" : ":ANALOG:RDS:AF_04",
"RDS_AF_05" : ":ANALOG:RDS:AF_05",
"RDS_AF_06" : ":ANALOG:RDS:AF_06",
"RDS_AF_07" : ":ANALOG:RDS:AF_07",
"RDS_AF_08" : ":ANALOG:RDS:AF_08",
"RDS_AF_09" : ":ANALOG:RDS:AF_09",
"RDS_AF_10" : ":ANALOG:RDS:AF_10",
"RDS_TP" : ":ANALOG:RDS:TP",
"RDS_TA" : ":ANALOG:RDS:TA",
"RDS_TMC" : ":ANALOG:RDS:TMC",
"RDS_LANGUAGE" : ":ANALOG:RDS:LANGUAGE",
"RDS_TIME" : ":ANALOG:RDS:TIME",
"RDS_YEAR" : ":ANALOG:RDS:YEAR",
"RDS_MONTH" : ":ANALOG:RDS:MONTH",
"RDS_DAY" : ":ANALOG:RDS:DAY",
}
class RedWoodTunerSg:
    def __init__(self, port):
        self.port = port
        self.baudRate = 115200
        self.parity = serial.PARITY_NONE
        self.stopBits = serial.STOPBITS_ONE
        self.bytesize = serial.EIGHTBITS
        self.timeout = 2
        self._serial = serial.Serial(port=self.port,
                                     baudrate=self.baudRate,
                                     parity=self.parity,
                                     stopbits=self.stopBits,
                                     bytesize=self.bytesize,
                                     timeout=self.timeout)
    def __del__(self):
        self._serial.close()

    def __write(self, command):
#        serial.Serial.write(self._serial, bytes(command + '\r\n', 'UTF-8'))
        serial.Serial.write(self._serial, str.encode(command))
    # end-of-method

    def set_power(self, power):
        self.__write("CONF:" + TunerSignalgeneratorCommanddict['POWER'] + ' ' + power + "\r")
    # end-of-method